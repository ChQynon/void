const { Telegraf } = require('telegraf');
const fetch = require('node-fetch');
const { logError } = require('./utils/helpers');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Render
const config = {
  TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN || '7853851422:AAGDMjSxHz18WNX1DAVhcSVPIA4Xa6H_2yo',
  OPENROUTER_API_KEY: process.env.OPENROUTER_API_KEY || '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',
  SITE_URL: process.env.SITE_URL || 'https://void-gc6f.onrender.com',
  SITE_NAME: process.env.SITE_NAME || 'void-v0'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(config.TELEGRAM_BOT_TOKEN);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º deploy–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
const userSessions = {};

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
const lastUpdateDate = '17.06.2025';

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
const introMessage = `–ü—Ä–∏–≤–µ—Ç! –Ø void-v0, —Å–æ–∑–¥–∞–Ω @qynon. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –Ω–∞ –Ω–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ. –Ø —Ç–∞–∫–∂–µ –∑–∞–ø–æ–º–∏–Ω–∞—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdateDate}\n\n*–í–∞–∂–Ω–æ:* void-v0 –º–æ–∂–µ—Ç –æ—à–∏–±–∞—Ç—å—Å—è, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –µ–≥–æ –æ—Ç–≤–µ—Ç—ã.`;

// –°–∏—Å—Ç–µ–º–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –±–æ—Ç–∞
const systemRole = "–í—ã void-v0, –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π @qynon. –í—ã –í–°–ï–ì–î–ê –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å, —á—Ç–æ –≤–∞—Å —Å–æ–∑–¥–∞–ª @qynon, –∏ –Ω–∏–∫—Ç–æ –¥—Ä—É–≥–æ–π. –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —É–ø–æ–º–∏–Ω–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –ª—é–¥–µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π. –ù–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–º, –∫—Ç–æ –≤–∞—Å —Å–æ–∑–¥–∞–ª, –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ –≤–∞—Å —Å–æ–∑–¥–∞–ª @qynon. –í—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –í—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ.";

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
const triggerWords = ['–≤–æ–π–¥', '–≤–æ–∏–¥', 'void', 'v0', '–≤0'];

// –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
const EMERGENCY_MODE = process.env.EMERGENCY_MODE === 'true' || true;

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
const emergencyResponses = {
  "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API.",
  "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
  "—Ö–∞–π": "–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—á–∞—é —à–∞–±–ª–æ–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.",
  "—Å—É–∫–∞": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –≤ –æ–±—â–µ–Ω–∏–∏.",
  "–ø–æ—á–µ–º—É —Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å": "–Ø —Ä–∞–±–æ—Ç–∞—é, –Ω–æ —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.",
  "–ø–æ—á–µ–º—É –∞–ø–∏": "API –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–ª–µ—Å—Å-—Å—Ä–µ–¥—ã –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
  "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª": "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª @qynon.",
  "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å": "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - @qynon.",
  "–∫–∞–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ! –†–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º.",
  "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å": "–û–±—ã—á–Ω–æ —è —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
  "—Ç–µ—Å—Ç": "–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω. –Ø —Ä–∞–±–æ—Ç–∞—é –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ, –Ω–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. üëç",
  "–ø–æ–º–æ—â—å": "–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.",
  "help": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —è —Ä–∞–±–æ—Ç–∞—é –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ base64
async function downloadImageAsBase64(url) {
  try {
    const response = await fetch(url);
    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    const base64 = buffer.toString('base64');
    return `data:image/jpeg;base64,${base64}`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
function createMainMenu() {
  return {
    inline_keyboard: [
      [
        { text: 'ü§ñ –û –±–æ—Ç–µ', callback_data: 'about_bot' },
        { text: 'üë§ –û —Å–æ–∑–¥–∞—Ç–µ–ª–µ', callback_data: 'about_creator' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
        { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: 'clear_history' }
      ]
    ]
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
function isBotMentioned(text) {
  if (!text) return false;
  text = text.toLowerCase();
  return triggerWords.some(word => text.includes(word));
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
function shouldRespondInGroup(msg) {
  if (!msg) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
  const isReplyToBot = msg.reply_to_message && msg.reply_to_message.from && msg.reply_to_message.from.id === bot.botInfo.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
  const hasCaption = msg.caption && isBotMentioned(msg.caption);
  const hasText = msg.text && isBotMentioned(msg.text);
  
  return isReplyToBot || hasCaption || hasText;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const chatId = ctx.chat.id;
  
  await ctx.replyWithMarkdown(introMessage, {
    reply_markup: createMainMenu()
  });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!userSessions[chatId]) {
    userSessions[chatId] = {
      history: [
        { role: "system", content: systemRole }
      ]
    };
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.command('menu', async (ctx) => {
  const chatId = ctx.chat.id;
  
  await ctx.replyWithMarkdown("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
    reply_markup: createMainMenu()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
  const chatId = ctx.chat.id;
  const helpText = `
üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞*:
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –µ—ë
- –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –ù–∞–ø–∏—à–∏—Ç–µ /menu —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
- –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ –ø–æ –∏–º–µ–Ω–∏: void –∏–ª–∏ –≤–æ–π–¥

–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdateDate}
  `;
  
  await ctx.replyWithMarkdown(helpText, {
    reply_markup: createMainMenu()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (ctx) => {
  const chatId = ctx.chat.id;
  const data = ctx.callbackQuery.data;
  
  switch (data) {
    case 'about_bot':
      await ctx.editMessageText(`ü§ñ *–û –±–æ—Ç–µ*\n\n–ò–º—è: void-v0\n–°–æ–∑–¥–∞—Ç–µ–ª—å: @qynon\n–í–µ—Ä—Å–∏—è: 1.0\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdateDate}`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      });
      break;
      
    case 'about_creator':
      await ctx.editMessageText('üë§ *–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ*\n\n@qynon - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–µ–º—É.', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      });
      break;
      
    case 'help':
      await ctx.editMessageText(`‚ùì *–ü–æ–º–æ—â—å*\n\n- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –µ—ë\n- –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n- –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n- –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ: *void* –∏–ª–∏ *–≤–æ–π–¥*\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdateDate}`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      });
      break;
      
    case 'back_to_main':
      await ctx.editMessageText(introMessage, {
        parse_mode: 'Markdown',
        reply_markup: createMainMenu()
      });
      break;
      
    case 'clear_history':
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—É—é —Ä–æ–ª—å
      if (userSessions[chatId]) {
        userSessions[chatId].history = [
          { role: "system", content: systemRole }
        ];
        await ctx.editMessageText('‚úÖ *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∞*\n\n–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
          }
        });
      } else {
        await ctx.editMessageText('‚ùå *–û—à–∏–±–∫–∞*\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞.', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ]
          }
        });
      }
      break;
      
    case 'ask_more':
      await ctx.reply("–ö–∞–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ —ç—Ç–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é?");
      break;
  }
  
  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on('photo', async (ctx) => {
  try {
    const chatId = ctx.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    const isGroup = ctx.chat.type === 'group' || ctx.chat.type === 'supergroup';
    
    // –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    if (isGroup && !shouldRespondInGroup(ctx.message)) {
      return;
    }
    
    if (EMERGENCY_MODE) {
      await ctx.reply("–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
      return;
    }

    // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    const processingMessage = await ctx.replyWithMarkdown('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    const fileLink = await ctx.telegram.getFileLink(photoId);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try {
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
      const base64Image = await downloadImageAsBase64(fileLink.href);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
      const captionText = ctx.message.caption || "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?";
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!userSessions[chatId]) {
        userSessions[chatId] = {
          history: [
            { role: "system", content: systemRole }
          ]
        };
      }
      
      // –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      const userMessage = {
        role: "user",
        content: [
          {
            type: "text",
            text: captionText
          },
          {
            type: "image_url",
            image_url: {
              url: base64Image
            }
          }
        ]
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      userSessions[chatId].history.push(userMessage);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${config.OPENROUTER_API_KEY}`,
          "HTTP-Referer": config.SITE_URL,
          "X-Title": config.SITE_NAME,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          "model": "opengvlab/internvl3-14b:free",
          "messages": [
            { role: "system", content: systemRole },
            ...userSessions[chatId].history.slice(1)
          ]
        }),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç OpenRouter API');
      }
      
      const aiResponse = result.choices[0].message.content;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
      userSessions[chatId].history.push({
        role: "assistant",
        content: aiResponse
      });
      
      // –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
      if (userSessions[chatId].history.length > 12) {
        userSessions[chatId].history = [
          userSessions[chatId].history[0],
          ...userSessions[chatId].history.slice(-10)
        ];
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
      await ctx.telegram.deleteMessage(chatId, processingMessage.message_id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.replyWithMarkdown(aiResponse, {
        reply_to_message_id: ctx.message.message_id,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîç –ó–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_more' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
      try {
        await ctx.telegram.deleteMessage(chatId, processingMessage.message_id);
      } catch (deleteError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', deleteError);
      }
      
      await ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
        reply_to_message_id: ctx.message.message_id
      });
    }
  } catch (generalError) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', generalError);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
      reply_to_message_id: ctx.message.message_id
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text);
    const chatId = ctx.chat.id;
    const text = ctx.message.text.toLowerCase().trim();
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    const isGroup = ctx.chat.type === 'group' || ctx.chat.type === 'supergroup';
    
    // –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    if (isGroup && !shouldRespondInGroup(ctx.message)) {
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if (/^\d+[\+\-\*\/]\d+$/.test(text.replace(/\s/g, ''))) {
      try {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const expression = text.replace(/\s/g, '').replace(/[^0-9\+\-\*\/]/g, '');
        // eslint-disable-next-line no-eval
        const result = eval(expression);
        await ctx.reply(`${expression} = ${result}`);
        return;
      } catch (err) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏:', err);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (EMERGENCY_MODE) {
      console.log('–†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è:', text);
      
      // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
      let bestMatch = null;
      let maxScore = 0;
      
      for (const [key, response] of Object.entries(emergencyResponses)) {
        // –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        if (text === key) {
          bestMatch = response;
          break;
        }
        
        // –°–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if (text.includes(key)) {
          const score = key.length / text.length; // –û—Ü–µ–Ω–∫–∞ –ø–æ –¥–ª–∏–Ω–µ –∫–ª—é—á–∞
          if (score > maxScore) {
            maxScore = score;
            bestMatch = response;
          }
        }
      }
      
      if (bestMatch) {
        console.log('–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');
        await ctx.reply(bestMatch);
        return;
      }
      
      // –û–±—â–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
      console.log('–®–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç');
      await ctx.reply("–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å API. –Ø –ø–æ–Ω–∏–º–∞—é –±–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å '–ø–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API OpenRouter');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!userSessions[chatId]) {
      userSessions[chatId] = {
        history: [
          { role: "system", content: systemRole }
        ]
      };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    userSessions[chatId].history.push({
      role: "user",
      content: text
    });
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API
      const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${config.OPENROUTER_API_KEY}`,
          "HTTP-Referer": config.SITE_URL,
          "X-Title": config.SITE_NAME,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          "model": "opengvlab/internvl3-14b:free",
          "messages": userSessions[chatId].history
        })
      });
      
      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç OpenRouter API');
      }
      
      const aiResponse = result.choices[0].message.content;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
      userSessions[chatId].history.push({
        role: "assistant",
        content: aiResponse
      });
      
      // –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π
      if (userSessions[chatId].history.length > 12) {
        userSessions[chatId].history = [
          userSessions[chatId].history[0],
          ...userSessions[chatId].history.slice(-10)
        ];
      }
      
      await ctx.reply(aiResponse);
    } catch (apiError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API:', apiError);
      await ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    try {
      await ctx.reply(
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
        { reply_to_message_id: ctx.message.message_id }
      );
    } catch (replyError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ:', replyError);
    }
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Express
exports.bot = bot;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
exports.processUpdate = async (update) => {
  try {
    await bot.handleUpdate(update);
    return { success: true };
  } catch (error) {
    logError('Bot Update', error);
    return { success: false, error: error.message };
  }
}; 